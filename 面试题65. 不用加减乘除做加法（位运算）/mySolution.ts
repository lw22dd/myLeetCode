{
    function mySolution65(a: number, b: number): any {
        //模拟计算机底层的加法逻辑
        // 类似于竖式加法，a记录无进位的相加结果，b记录进位后的 相加结果，
        // 在整个过程中，a + b的总和始终保持不变，
        // 只是a和b的数值会变化，直到两个数没有重叠的1时，
        // 也就是b==0时没有新的进位产生，a等于原来的a+b

        
        while (b) {//b!=0就意味着还有需要进位的计算
            const c = (a & b) << 1;//得到进1的位置将进位左移1位，表示应该进位的位置
            //a^b表示的就是a和b做二进制加法运算，只是没有考虑进位，相当于两者的1叠加
            a ^= b;
            b = c;
        }
        return a;
    }
}